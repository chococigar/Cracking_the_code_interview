Q : Given an integer x and an unsorted array of integers, describe an algorithm to  determine whether two of the numbers add up to x.  (In this case, say that the  interviewer hates hash tables.)


A (where interviewer likes hash tables) :
hash the arrays
ex) [2, 7, 9, 3, 5, 4, 2, 1, 6]
as you traverse : {2 : 2, 7:1, 9:1, 3:1, 5:1, 4:1, 1:1, 6:1}
and check for x-a[i] in dict.

O(n).

A (where she hates it) :

BCR : O(n)

Time Complexity :

Brute : O(n^2)


[2, 7, 9, 3, 5, 4, 2, 1, 6]
x = 8

[6, 1, -1, 5, 3, 4, 6, 7, 1]

find duplicate between 2 array?

sort and see duplicate ? --> O(nlog(n))


Alternative Answer :
Sort array O(nlog(n)),
pointer @ beginning / end.
If sum of current two integers less than x, first pointer forwards.
Sum greater, move second pointer backwards.

Another Good Answer:
Create a binary search tree containing x minus each element  in the array.  Then, check whether any element of the array appears in the BST.  It  takes O(n log n) time to create a binary search tree from an array, since it takes  O(log n) time to insert something into a BST, and it takes O(n log n) time to see if  any element in an array is in a BST, since the lookup time for each element in the  array takes O(log n).  Therefore step one takes O(n log n) time and step two takes  O(n log n) time, so our total running time is O(n log n). 
